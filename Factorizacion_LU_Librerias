import pprint
import scipy
import scipy.linalg   
import numpy as np

def GEPP(A, b, doPricing = True):
    n = len(A)
    if b.size != n:
        raise ValueError("Argumento Invalido: Tamanho incompatible"+
                         "A & b.", b.size, n)
    for k in range(n-1):
        if doPricing:
            maxindex = abs(A[k:,k]).argmax() + k
            if A[maxindex, k] == 0:
                raise ValueError("La matriz es singular.")
            if maxindex != k:
                A[[k,maxindex]] = A[[maxindex, k]]
                b[[k,maxindex]] = b[[maxindex, k]]
        else:
            if A[k, k] == 0:
                raise ValueError("Eliminacion pivote es cero.")
        for row in range(k+1, n):
            multiplier = A[row,k]/A[k,k]
            A[row, k:] = A[row, k:] - multiplier*A[k, k:]
            b[row] = b[row] - multiplier*b[k]
    x = np.zeros(n)
    for k in range(n-1, -1, -1):
        x[k] = (b[k] - np.dot(A[k,k+1:],x[k+1:]))/A[k,k]
    return x


if __name__ == "__main__":
    A = scipy.array([[2.,-1.,1.],[3.,3.,9.],[3.,3.,5.]])

    b = scipy.array([[-1.],[0.],[4.]])
    
    P, L, U = scipy.linalg.lu(A)
    
    print "L:"
    pprint.pprint(L)
    
    print "U:"
    pprint.pprint(U)

    print "\nsoluciones y: "
    print GEPP(L,b)
    
    print "\nsoluciones x: "
    print GEPP(U,b)
